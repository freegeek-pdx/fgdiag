#!/usr/bin/ruby

require 'soap/rpc/driver'

@server = "data"
@@driver = SOAP::RPC::Driver.new("http://#{@server}/", "urn:procdb")

@@driver.add_method("ping")
@@driver.add_method("soap_methods")

begin
  retval = @@driver.ping
  if retval != "pong"
    raise "I could not connect to the server.\nMake sure you are connected to the network and try again.\n\n"
  end
rescue SOAP::FaultError => e
  raise "Server returned this error: #{e.message}\n\n"
rescue SOAP::RPCRoutingError, SOAP::ResponseFormatError, Errno::ECONNREFUSED, Errno::EHOSTUNREACH, Errno::ENETDOWN, Errno::ENETUNREACH, Errno::ECONNRESET, Errno::ETIMEDOUT, NoMethodError, SocketError, NameError => e
  raise "I could not connect to the server (#{e.message}).\nMake sure you are connected to the network and try again.\n\n"
end
@@soap_methods = @@driver.soap_methods
@@soap_methods.each{|x|
  @@driver.add_method(*x)
}

progress = IO.popen('dialog --progressbox "Looking up CPU in Processor DB:" 8 80', 'w')

@proc = ARGV.shift

unless @proc
  progress.puts "Detecting processor in machine, please wait.."
  progress.puts
  @proc = `lshw -class cpu 2>/dev/null | grep 'product: ' | cut -d ' ' -f 9- | head -1`
end

progress.puts "Searching databases for the processor:"
progress.puts "#{@proc}"

begin
  @results = @@driver.find_results(@proc)
rescue SOAP::RPCRoutingError, SOAP::ResponseFormatError, Errno::ECONNREFUSED, Errno::EHOSTUNREACH, Errno::ENETDOWN, Errno::ENETUNREACH, Errno::ECONNRESET, Errno::ETIMEDOUT, NoMethodError, SocketError, NameError, SOAP::FaultError => e
  raise "Soap communication error: #{e.message}"
end

matches = @results


tempf = `mktemp`
results = File.open(tempf, 'w')

results.puts "Found #{matches.length} match#{matches.length == 1 ? "" : "es"}."

display_values = ["Found in database", "Matched product"] + @@driver.display_fields
maxlength = display_values.map{|x| x.length}.max + 1

for match in matches
  db, found, values = match
  hash = {}
  values["Found in database"] = db
  values["Matched product"] = found
  results.puts
  display_values.each do |i|
    results.puts sprintf("%-#{maxlength}s: %s", i, values[i].to_s.strip)
  end
end

results.close
progress.close
system("dialog", "--textbox", tempf, "25", "80")
File.delete(tempf)

