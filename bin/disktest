#!/usr/bin/ruby

require 'yaml'
require 'open4'
require 'rubytui'
include RubyTUI

class HardDrive
  MODULES = %w[ide_core ide_disk ide_generic]
  PASSED = 0
  FAILED = 1
  UNTESTED = 2

  def HardDrive.scan
    mnt = `mount`
    Dir.open('/sys/block').find_all {|dev|
      /^[sh]d[a-z]/.match(dev) and
      `cat /sys/block/#{dev}/removable`.chomp == '0' and
      ! mnt.include?(dev)
    }.map {|dev| HardDrive.new(dev)}
  end

  def initialize(dev)
    @dev = dev
    @testing = false
    @status = UNTESTED
    @log = []
    @size = `cat /sys/block/#{dev}/size`.chomp.to_i * 512
    @started = @finished = nil
  end
  attr_reader :dev, :size
  attr_accessor :finished, :testing, :log
  attr_writer :status

  def run_tests
    return if @testing
    @testing = true
    @started = Time.new
    @thread = Thread.new(self) {|drive|
      begin
        if(drive.smart &&
           drive.badblocks &&
           drive.smart &&
           drive.wipe &&
           drive.smart)
          drive.status = PASSED 
        end
      rescue Exception => e
        drive.log << e
        drive.log << e.backtrace
        drive.status = FAILED
      ensure
        drive.testing = false
        drive.finished = Time.new
      end
    }
    @thread.abort_on_exception = true
    return @thread
  end

  def smart
   is_ata=true
   if /^\/dev\/sd[a-z]/.match(dev)
      is_ata=system("lsscsi | grep #{dev} | awk {'print $3'} | grep -q ATA")
   end
   if is_ata
      system('/usr/sbin/smartctl', '-q', 'silent', '--all', '-d', 'ata', dev)
   else
      system('/usr/sbin/smartctl', '-q', 'silent', '--all', dev)
   end
   retval=$?.exitstatus
   if retval != 0
      log << "smart test returned: '#{retval}'"
      if retval > 4
        @status = FAILED
        return false
      end
    end
    log << "smart test passed"
    return true
  end

  def badblocks
    log << "badblocks test started"
    log << ""
    # progress comes in through err, bad blocks are reported on out
    #bbpid, bbin, bbout, bberr = Open4.popen4("#{File.dirname(__FILE__)}/fake_badblocks -c 1024 -s /dev/#{dev}")
    #bbpid, bbin, bbout, bberr = Open4.popen4("/sbin/badblocks -c 1024 -s /dev/#{dev}")
    bbpid, bbin, bbout, bberr = Open4.popen4("/sbin/badblocks -c 1024 -swt 0xffffffff /dev/#{dev}")
    bbout.sync = bberr.sync = true
    until bberr.closed? or bberr.eof?
      matches = nil
      buff = nil
      reads, writes, errs = IO.select([bbout, bberr], nil, nil, 1)
      if reads
        progress = reads.include?(bberr) ? bberr : nil
        sectors = reads.include?(bbout) ? bbout : nil
      end
      if sectors and ! sectors.eof?
        buff = sectors.read_nonblock(1000)
        # :TODO: find out what this means for sure
        @status = FAILED
        curr = log[-1]
        log[-1] = "badblocks reports failures"
        log << curr
      end
      if progress and ! progress.closed?
        until( matches or bberr.eof? )
          buff = progress.read_nonblock(1000)
          matches = %r,(\d+)\s*/\s*(\d+)[^\d]*,.match(buff)
        end
        if matches and (matches[2].to_i >= matches[1].to_i)
          log[-1] = "#{(matches[1].to_i * 100) / matches[2].to_i}% of badblocks scan complete"
        end
      end
      if @status == FAILED
        [bbin, bbout, bberr].each {|io| io.close}
        Process.kill("INT", bbpid)
        break
      end
    end
    stats = Process::waitpid2(bbpid)
    if stats[1] and stats[1].exitstatus and stats[1].exitstatus.nonzero?
      @log << "badblocks failed"
      @status = FAILED
    end
    return @status != FAILED
  end # def badblocks

  ZEROS = "\0" * (1024 * 1024)
  open('/dev/urandom') {|urand| RANDOM = urand.read(1024)}
  def wipe
    log << "disk wipe started..."
    total = 0
    log << ""
    open("/dev/#{dev}", "w") {|drive|
      until drive.closed?
        begin
          written = drive.write(ZEROS)
          total += written
          log[-1] = "#{(total.to_i * 100) / (2 * size.to_i)}% of wipe complete"
          if @status == FAILED or written < ZEROS.length
            break
          end
        rescue Errno::ENOSPC => e
          break
        end
      end
    }
    open("/dev/#{dev}", "w") {|drive|
      until drive.closed?
        begin
          written = drive.write(RANDOM)
          total += written
          log[-1] = "#{(total.to_i * 100) / (2 * size.to_i)}% of wipe complete"
          if @status == FAILED or written < RANDOM.length
            break
          end
        rescue Errno::ENOSPC => e
          break
        end
      end
    }
    log << "disk wipe finished"
    return @status != FAILED
  end

  def output_display
    highlight(dev + ": ")
    echo(status + " - " + time_taken)
  end

  def output_size
    disp_size = size
    units = %w[bytes KiB MiB GiB TiB PiB EiB ZiB YiB]
    ind = 0
    while( disp_size / 1024 > 0 )
      ind += 1
      disp_size = disp_size / 1024
    end
    highlight(dev + ": ")
    echo(disp_size.to_s + (units[ind] or "?B"))
  end

  def output_decimal_size
    disp_size = size
    units = %w[bytes KB MB GB TB PB EB ZB YB]
    ind = 0
    while( disp_size / 1000 > 0 )
      ind += 1
      disp_size = disp_size / 1000
    end
    highlight(dev + ": ")
    echo(disp_size.to_s + (units[ind] or "?B"))
  end

  def time_taken
    if @started
      if @finished
        duration = @finished - @started
      else
        duration = Time.new - @started
      end
      "#{duration} seconds"
    else
      "(no time has been recorded yet)"
    end
  end

  def status
    case @status
    when PASSED 
      "all tests passed:\n#{log.to_yaml}"
    when FAILED
      "failed:\n#{log.to_yaml}"
    else
      log.last or "unknown status"
    end
  end

  def passed?
    @status == PASSED
  end

  def failed?
    @status == FAILED
  end

  Err_re = /error/
  def klog_match?(line)
    Err_re.match(line) and
      /#{@dev}/.match(line)
  end

  def klog(*msgs)
    msgs.each do |msg|
      if klog_match?(msg)
        @status = FAILED
        #:MC: ugly handling of continuously updating progress log entry
        curr = log[-1]
        log[-1] = msg
        log << curr
      end
    end
  end

end

if __FILE__ == $0
  trap( "SIGINT" ) do
    errorMessage "\n\nUser interrupt caught.  Exiting.\n\n"
    exit!( 1 )
  end
  begin
    if `id -u` != "0\n"
      $stderr.puts "This program must be ran as root"
      exit 1
    end
    logpipe = "/tmp/klog"
    logconf = "/tmp/syslog.conf"
    open(logconf, 'w') {|conf|
      conf.puts "*.* #{logpipe}"
      #conf.puts "*.* /dev/console"
    }
    `/usr/sbin/invoke-rc.d sysklogd stop`
    `/sbin/syslogd -f #{logconf}`
    klpid, klin, klout, klerr = open4("tail -F #{logpipe}")
    loglines = []
    drives = HardDrive.scan.sort_by {|d| d.dev}
    drives.each {|d| d.output_decimal_size}
    promptWithDefault("Are these the expected drives and do you want to test them?", "yes", "Type 'yes' to begin") do |response|
      /^y/.match(response)
    end
    if drives.size < 2
      errorMessage("There are #{drives.size} drives! 2 were expected.\n")
      promptWithDefault("Are you sure you want to continue?", "no", "Type 'yes, I want to test #{drives.size} drive(s)' to continue anyway or 'no' to abort the disktest.") do |output|
        if output == nil || output == '' || output.match(/^no$/)
          errorMessage("Aborted.\n")
          exit
        end
        output.match(/^yes, I want to test . drive(s)$/)
      end
    end
    threads = drives.map {|drive| drive.run_tests}
    clearer = `clear`
    until threads.empty?
      if select([klout],nil,nil,0.1)
        loglines += klout.read_nonblock(1000).split("\n")
      end
      drives.each {|d|
        d.klog(*(loglines.delete_if {|l| d.klog_match?(l)}))
        d.output_display
      }
      loglines.clear
      threads = threads.find_all {|t|
        t.alive?
      }
      sleep 1
      $stderr.write(clearer)
      $stderr.flush
    end
  ensure
    Process::kill(9, klpid)
    header "Final status:"
    drives.each {|d|
      d.output_display
    }
    drives.each {|d|
      if d.passed?
        d.output_decimal_size
        puts colored( "#{d.dev} passed!  Label and store it.", 'green', 'bold' )
      elsif d.failed?
        errorMessage "#{d.dev} failed.  Recycle it.\n"
      else
        d.output_decimal_size
        errorMessage "#{d.dev} did not finish testing.  Seek expert attention.\n"
      end
    }
    until select([$stdin], [], [], 0) == nil
      $stdin.getc
    end
  end
end
