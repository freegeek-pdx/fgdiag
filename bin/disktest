#!/usr/bin/ruby

require 'yaml'
require 'open4'
require 'rubytui'
require 'fcntl'
include RubyTUI
require 'tempfile'
require 'bytes'
require 'rbconfig'
require 'disktestlog'

# Environment variables that disktest pays attention to:
# * DISKTEST_REQUIRED_NUMBER_OF_DRIVES
# * DISKTEST_ALLOW_LESS_THAN_REQUIRED
# * DISKTEST_DISK_REGEX
# * DISKTEST_SCSI_REGEX
# * DISKTEST_LOGTO_FGDB
# * DISKTEST_TIME_LIMIT_PER_GB
# * DISKTEST_TIME_LIMIT_MINIMUM
# * DISKTEST_DATA_SECURITY_BATCH_MODE

def clear_stdin(parent = true)
  flags=$stdin.fcntl(Fcntl::F_GETFL)
  if parent
    while clear_stdin(false)
      nil
    end
  else
    begin
      $stdin.read_nonblock(10000000)
      return true
    rescue Errno::EAGAIN
      return false
    ensure
      $stdin.fcntl(Fcntl::F_SETFL, flags)
    end
  end
end

class DisktestTimeoutError < StandardError
end

class HardDrive
  PASSED = 0
  FAILED = 1
  UNTESTED = 2 # INCOMPLETE
  ABORTED = 3 # TIMEOUT
  STOPPED = 4 # CANCELLED
  RETRY = 5   # NEEDS_RETRY
  REVERSE = {"0" => "PASSED", "1" => "FAILED", "2" => "UNTESTED", "3" => "ABORTED", "4" => "STOPPED", "5" => "RETRY"}

  def check_time
    return if self.timeout_limit == -1
    if self.timeout_limit < self.duration_seconds
      @reason = "exceeded its calculated time limit of #{format_time(self.timeout_limit)} (#{ENV['DISKTEST_TIME_LIMIT_PER_GB']} minutes per GB)"
      raise DisktestTimeoutError.new("Disk #{self.dev} has #{@reason}")
    end
  end

  def timeout_limit
    return -1 if ENV['DISKTEST_TIME_LIMIT_PER_GB'].nil?
    limit = ENV['DISKTEST_TIME_LIMIT_PER_GB'].to_f * self.size_in_gb
    if ! ENV['DISKTEST_TIME_LIMIT_MINIMUM'].nil?
      if limit < ENV['DISKTEST_TIME_LIMIT_MINIMUM'].to_f
        limit = ENV['DISKTEST_TIME_LIMIT_MINIMUM'].to_f
      end
    end
    return limit * 60
  end

  def HardDrive.modules
    @@modules ||= case (arch = Config::CONFIG["arch"].split("-")[0])
                  when "i486", "x86_64"
                    %w[ide_core ide_disk ide_generic usb_storage]
                  when "powerpc"
                    %w[usb_storage]
                  else
                    errorMessage("Unsupported architecture: #{arch}\n")
                    exit!(1)
                  end
  end

  def HardDrive.scan
    mnt = `mount`
    loaded_modules = `lsmod`.split("\n")[1..-1].map{|x| x.split(' ').first}
    (HardDrive.modules - loaded_modules).each{|x|
      if ! system("modprobe #{x}")
        errorMessage("Could not load required module: #{x}\n")
        exit!(1)
      end
    }
    Dir.open('/sys/block').find_all {|dev|
      (ENV['DISKTEST_DISK_REGEX'] ? /#{ENV['DISKTEST_DISK_REGEX']}/ : /^[sh]d[a-z]/).match(dev) and
      `cat /sys/block/#{dev}/removable`.chomp == '0' and
      ! mnt.include?(dev)
    }.map {|dev| HardDrive.new(dev)}
  end

  def initialize(dev)
    @dev = dev
    @lshw_this = nil
    @testing = false
    @status = UNTESTED
    @reason = ""
    @log = []
    @size = `cat /sys/block/#{dev}/size`.chomp.to_i * 512
    @started = @finished = nil
    @already_testing = DisktestLog.already_testing?(vendor, model_name, serial)
    @disktest_run = DisktestLog.new(vendor, model_name, serial, self.megabytes_size, self.bus_type)
  end
  attr_reader :dev, :size
  attr_accessor :finished, :testing, :log
  attr_accessor :status
  attr_reader :disktest_run

  def already_testing?
    @already_testing
  end

  def status_s
    REVERSE[@status.to_s]
  end

  def run_tests
    return if @testing
    @testing = true
    @started = Time.new
    self.disktest_run.started(@started)
    @thread = Thread.new(self) {|drive|
      Thread.current['is_parent_thread'] = false
      begin
        if((not drive.end_test?) &&
           drive.smarttest &&
           drive.smart && 
           drive.badblocks &&
           drive.smart &&
           drive.wipe &&
           drive.smart)
          drive.status = PASSED unless drive.end_test?
        end
      rescue Exception => e
        is_timeout = (e.class == DisktestTimeoutError)
        drive.log << e
        drive.log << e.backtrace unless is_timeout
        drive.status = (is_timeout ? ABORTED : FAILED)
      ensure
        drive.testing = false
        drive.finished = Time.new
        drive.save_status
      end
    }
    @thread.abort_on_exception = true
    return @thread
  end

  def save_status
    success = false
    first = true
    while ! success
      success = true
      begin
        self.disktest_run.complete(status_s, finished, @reason, log.join("\n"))
      rescue DisktestLogException => e
        err = "Failed to save result to database record, waiting 5 seconds to retry. Error was: #{e.message}"
        if first
          log << err
        else
          log[-1] = err
        end
        errorMessage "Failed to save result to database record, waiting 5 seconds to retry. Error was: #{e.message}"
        sleep 5
        success = false
        first = false
      end
    end
    if !first
      log[-1] = "Saved record to database successfully."
    end
  end

  SMARTCTL = 'smartctl'

  def smarttest
    log << "initiating smart self-test"
    system(SMARTCTL, '-q', 'silent', '-t', 'short', "/dev/#{dev}")
    # always return true, in case we're testing a drive without smart support.
    return true
  end

  def bus_type
    return @bus_type if defined?(@bus_type)

    is_ata=true
    scsi_regex = (ENV['DISKTEST_SCSI_REGEX'] ? ENV['DISKTEST_SCSI_REGEX'] : "sd[a-z]" )
    if /^#{scsi_regex}$/.match(dev)
      is_ata=`lsscsi`.select{|x| x.match(dev)}.first.split(" ")[2] == "ATA"
    end

    if is_ata
      is_sata = !!(`hdparm -I /dev/#{dev} 2>&1`.match(/((1.5|3.0|6.0)Gb|unknown 76\[0\])/))

      if is_sata
        @bus_type = "SATA"
      else
        @bus_type = "IDE"
      end
    else
      @bus_type = "SCSI"
    end
    return @bus_type
  end

  def smart
    if bus_type != "SCSI" # is ATA
      system(SMARTCTL, '-q', 'silent', '--all', '-d', 'ata', "/dev/#{dev}")
    else
      system(SMARTCTL, '-q', 'silent', '--all', "/dev/#{dev}")
    end
    retval=$?.exitstatus
    if retval != 0
      smart_s = "smart test returned: '#{retval}'"
      log << smart_s
      if retval > 4
        @status = FAILED
        @reason = smart_s
        return false
      end
    end
    log << "smart test passed"
    return true
  end

  def badblocks
    log << "badblocks test started"
    log << ""
    # progress comes in through err, bad blocks are reported on out
    #bbpid, bbin, bbout, bberr = Open4.popen4("#{File.dirname(__FILE__)}/fake_badblocks -c 1024 -s /dev/#{dev}")
    #bbpid, bbin, bbout, bberr = Open4.popen4("/sbin/badblocks -c 1024 -s /dev/#{dev}")
    bbpid, bbin, bbout, bberr = Open4.popen4("/sbin/badblocks -e 1 -c 1024 -swt 0xffffffff /dev/#{dev}")
    bbout.sync = bberr.sync = true
    current_state = 0
    statematch = "Testing" # assume starting
    interrupted = false
    until bberr.closed? or bberr.eof?
      self.check_time
      matches = nil
      buff = nil
      reads, writes, errs = IO.select([bbout, bberr], nil, nil, 1)
      if reads
        progress = reads.include?(bberr) ? bberr : nil
        sectors = reads.include?(bbout) ? bbout : nil
      end
      if sectors and ! sectors.eof?
        buff = sectors.read_nonblock(1000)
        # :TODO: find out what this means for sure
        @status = FAILED
        @reason = "badblocks reports failures"
        curr = log[-1]
        log[-1] = @reason
        log << curr
      end
      if progress and ! progress.closed?
        until( matches or bberr.eof? )
          buff = progress.read_nonblock(1000)
          interrupted = true if buff.match(/Interrupted/)
          newmatch = %r,^([^ ]+).*:,.match(buff)
          statematch = newmatch[1] if newmatch
#          matches = %r,(\d+)\s*/\s*(\d+)[^\d]*,.match(buff)
          matches = %r,([\d.]+)%,.match(buff)
        end
        if matches
          part = "unknown step"
          if statematch
            part += " (#{statematch})"
            if statematch.match(/Testing/)
              part = "write (part one)"
            elsif statematch.match(/Reading/)
              part = "read (part two)"
            end
          end
          log[-1] = "#{matches[1].to_f.round}% of badblocks #{part} complete"
        end
      end
      if end_test?
        [bbin, bbout, bberr].each {|io| io.close}
        Process.kill("INT", bbpid)
        break
      end
    end
    stats = Process::waitpid2(bbpid)
    if stats[1] and stats[1].termsig != 2 and stats[1].exitstatus and stats[1].exitstatus.nonzero?
      unless end_test?
        if interrupted
          @status = STOPPED
        else
          @reason = "badblocks failed"
          @log << @reason
          @status = FAILED
        end
      end
    end
    return !end_test?
  end # def badblocks

  ZEROS = "\0" * (1024 * 1024)
  open('/dev/urandom') {|urand| RANDOM = urand.read(1024) * 1024}
  def wipe
    log << "disk wipe started..."
    total = 0
    log << ""
    open("/dev/#{dev}", "w") {|drive|
      until drive.closed?
        self.check_time
        begin
          needed = size.to_i - drive.pos
          str = ZEROS
          str = str[0..(needed - 1)] if needed < ZEROS.length
          written = drive.write(str)
          total += written
          log[-1] = "#{(total.to_i * 100) / (2 * size.to_i)}% of wipe complete"
          if end_test? or written < ZEROS.length
            break
          end
        rescue Errno::ENOSPC => e
          break
        end
      end
    }
    open("/dev/#{dev}", "w") {|drive|
      until drive.closed?
        self.check_time
        begin
          needed = size.to_i - drive.pos
          str = RANDOM
          str = str[0..(needed - 1)] if needed < RANDOM.length
          written = drive.write(str)
          total += written
          log[-1] = "#{(total.to_i * 100) / (2 * size.to_i)}% of wipe complete"
          if end_test? or written < RANDOM.length
            break
          end
        rescue Errno::ENOSPC => e
          break
        end
      end
    }
    if total.to_i == (2*size.to_i)
      log << "disk wipe finished"
    else
      log << "disk wipe did not finish entire disk (wrote #{total.to_i} of expected #{2 * size.to_i}, based on size #{size.to_i})"
      @status = RETRY unless end_test?
    end
    return !end_test?
  end

  def output_display
    highlight(dev + " " + drive_details + ": ")
    echo(final_status + " - " + time_taken)
  end

  # integer math, should floor
  def size_in_gb
    (size / (1000 * 1000 * 1000)).to_i
  end

  # integer math, should floor
  def megabytes_size
    (size / (1000*1000)).to_i
  end

  def display_size
    size.to_bytes(1, false, false)
  end

  def output_drive_descriptor
    highlight(dev + ": ")
    $stderr.puts colored(drive_details, "black", "on_yellow")
    $stderr.flush
  end

  def drive_details
    bus_type + " " + display_size.to_s + unique_identity
  end

  def missing_serial?
    serial == "Unknown Serial"
  end

  def unique_identity
    " <<%s %s (%s)>>" % [vendor, model_name, serial]
  end

  def vendor
    match = self.lshw.match("<vendor>(.*?)</vendor>")
    return match ? match[1] : "Unknown Vendor"
  end

  def model_name
    match = self.lshw.match("<product>(.*?)</product>")
    return match ? match[1] : "Unknown Model"
  end

  def set_serial(value)
    @serial = value
    @disktest_run.update_serial(value)
  end

  def serial
    return @serial if defined?(@serial)
    match = self.lshw.match("<serial>(.*?)</serial>")
    return match ? match[1] : "Unknown Serial"
  end

  # :MC: better done with real xml parsing...
  def lshw
    return @lshw_this if @lshw_this
    @@lshw_full ||= `lshw -xml -class disk 2> /dev/null`
    @@lshw_split ||= @@lshw_full.split('id="disk')
    debugMsg("%d lshw drives found." % @@lshw_split.length)

    @lshw_this = @@lshw_split.find {|node|
      node.match("logicalname>/dev/#{dev}</logicalname")
    }
    if @lshw_this
      debugMsg(@lshw_this)
    else
      @lshw_this = ""
      errorMessage("Could not get the lshw for this (%s) drive." % dev)
#      exit!(1)
    end
    return @lshw_this
  end

  def format_time(duration)
    seconds = (duration % 60)
    middle = ((duration - seconds)/60.0).to_i
    minutes = middle % 60
    hours = ((middle - minutes)/60.0).to_i
    "#{(sprintf "%d:%2d:%2d", hours, minutes, seconds).gsub(' ', '0')} hours"
  end

  def duration_seconds
    if @started
      if @finished
        duration = @finished - @started
      else
        duration = Time.new - @started
      end
      duration = duration.ceil
    else
      -1
    end
  end

  def time_taken
    duration = self.duration_seconds
    return (duration != -1 ? format_time(duration) : "(no time has been recorded yet)")
  end

  def status
    @status
  end

  def final_status
    case @status
    when PASSED
      "all tests passed:\n#{log.to_yaml}"
    when FAILED
      "failed:\n#{log.to_yaml}"
    when STOPPED
      "stopped:\n#{log.to_yaml}"
    when RETRY
      "retry:\n#{log.to_yaml}"
    when ABORTED
      "aborted:\n#{log.to_yaml}"
    else
      log.last or "unknown status"
    end
  end

  def passed?
    @status == PASSED
  end

  def failed?
    @status == FAILED
  end

  def retry?
    @status == RETRY
  end

  def aborted?
    @status == ABORTED
  end

  def stopped?
    @status == STOPPED
  end

  def bad_drive?
    failed? or aborted?
  end

  def end_test?
    failed? or aborted? or stopped? or retry?
  end

  Err_re = /error/
  def klog_match?(line)
    Err_re.match(line) and
      /#{@dev}/.match(line)
  end

  def klog(*msgs)
    return if bad_drive?
    msgs.each do |msg|
      break if bad_drive?
      if klog_match?(msg)
        @status = FAILED
        #:MC: ugly handling of continuously updating progress log entry
        @reason = "Logged kernel error: " + msg
        if log.length > 0
          curr = log[-1]
          log[-1] = @reason
          log << curr
        else
          log << @reason
        end
      end
    end
  end

end

if __FILE__ == $0
  if `id -u` != "0\n"
    errorMessage "This program must be ran as root.\n\n"
    exit 1
  end
  logpipe=""
  logconf=""
  logpipe = Tempfile.new("klog")
  logpipe.close
  logpipe = logpipe.path
  logconf = Tempfile.new("syslog.conf")
  logconf.puts "*.* #{logpipe}"
  #    logconf.puts "*.* /dev/console"
  logconf.close
  logconf = logconf.path
  if File.exists?("/sbin/syslogd")
    `/usr/sbin/invoke-rc.d sysklogd stop`
    `/sbin/syslogd -f #{logconf}`
  elsif File.exists?("/usr/sbin/rsyslogd")
    `/usr/sbin/invoke-rc.d rsyslog stop`
    `/usr/sbin/rsyslogd -f #{logconf}`
  else
    errorMessage "You need to install a supported syslog daemon.\n\n"
    exit 1
  end
  klpid, klin, klout, klerr = open4("tail -F #{logpipe}")
  loglines = []
  loglines += `dmesg`.split("\n")
  clearer = `clear`
  drives = HardDrive.scan.sort_by {|d| d.dev}
  # Disable SIGINT initially until testing starts
  Thread.current['is_parent_thread'] = false
  trap( "SIGINT" ) do
    if Thread.current['is_parent_thread']
    errorMessage "\n\nUser interrupt caught.  Ending disktest and exiting.\n\n"
    drives.each{|d|
      d.status = HardDrive::STOPPED if d.status == HardDrive::UNTESTED
      d.finished = Time.now
    }
    drives.each{|d|
      d.save_status
      }
      exit
    end
  end
  begin
    $stderr.write(clearer)
    $stderr.flush
    $stderr.puts colored("Checking drives for SMART status:\n")
    Thread.current['is_parent_thread'] = true
    drives.each {|d|
      d.smart
      s = d.status_s
      s = "PASSED" if s == "UNTESTED"
      highlight(s + " ")
      d.output_drive_descriptor
    }
    Thread.current['is_parent_thread'] = false
    def show_busy_drives(drives, existing = [])
      busy_drives = drives.select{|d| (!d.missing_serial?) && d.already_testing?} - existing
      if busy_drives.length > 0
        highlight("\nWARNING: The record shows that the following drive(s) are still being tested in another machine but haven't yet completed: #{busy_drives.map{|x| x.dev}.join(", ")}.\nPerhaps this means the testing machine was not properly powered off.\n\n")
      end
      busy_drives
    end
    busy_drives = show_busy_drives(drives)
    RubyTUI::PromptColor.replace(["magenta", "bold"])
    def menu_about_serials(drives)
      d = true
      while d
        opts = drives.map{|x| x.dev + ": " + x.drive_details}
        opts << "Finish correcting serial numbers."
        choice = menu("\nPlease choose a serial number:", "Which would you like to correct?", *opts)
        choice.match(/^([^ :]+):/)
        d = $1
        if d
          drive = drives.select{|x| x.dev == d}.first
          serial = 1
          verify = 2
          while serial != verify
            serial = prompt("\nPlease enter the correct serial number for #{d}", "Cannot be empty") do |p|
              !p.strip.empty?
            end
            if ENV['DISKTEST_DATA_SECURITY_BATCH_MODE'] == "true"
              verify = prompt("Please enter the correct serial number again to verify")
              if verify != serial
                errorMessage("Serial numbers did not match.\n")
              end
            else
              verify = serial
            end

          end
          drive.set_serial(serial)
        end
      end
    end
    prompt_serials = true
    if ENV['DISKTEST_DATA_SECURITY_BATCH_MODE'] == "true"
      count = -1
      while count != 0
        count = 0
        drives.each do |d|
          if d.missing_serial?
            count += 1
            errorMessage("Warning: #{d.dev} does not have a serial number, please correct it before starting the test.\n")
          end
        end
        if count > 0
          prompt_serials = false
          menu_about_serials(drives)
        end
      end
    end
    if prompt_serials
      promptWithDefault("Are the hard drive serial numbers displayed correctly above?", "yes", "Type 'yes' to continue or 'no' to correct serial numbers.") do |response|
        if response.match(/^n/i)
          menu_about_serials(drives)
        end
        /^[yn]/i.match(response)
      end
    end
    busy_drives = show_busy_drives(drives, busy_drives)
    promptWithDefault("Are these the expected drives and do you want to test them?", "yes", "Type 'yes' to begin") do |response|
      if response.match(/^n/i)
        errorMessage("Aborted.\n")
        drives.each{|d|
          d.status = HardDrive::STOPPED if !d.failed?
          d.save_status
        }
        exit
      end
      /^y/i.match(response)
    end
    required = 2
    if ENV['DISKTEST_REQUIRED_NUMBER_OF_DRIVES']
        required = ENV['DISKTEST_REQUIRED_NUMBER_OF_DRIVES'].to_i
    end
    if drives.size < required && ENV['DISKTEST_ALLOW_LESS_THAN_REQUIRED'] != "true"
      errorMessage("There are #{drives.size} drives! at least #{required} were expected.\n")
      promptWithDefault("Are you sure you want to continue?", "no", "Type 'yes, I want to test #{drives.size} drive(s)' to continue anyway or 'no' to abort the disktest.") do |output|
        if output == nil || output == '' || output.match(/^n/i)
          errorMessage("Aborted.\n")
          drives.each{|d|
            d.status = HardDrive::STOPPED if !d.failed?
            d.save_status
          }
          exit
        end
        output.match(/^yes, I want to test . drive\(s\)$/)
      end
    end
    Thread.current['is_parent_thread'] = true
    threads = drives.map {|drive|
      begin
        drive.run_tests
      rescue DisktestLogException => e
        RubyTUI::errorMessage "Network communication error: " + e.message
        exit 1
      end
    }
    until threads.empty?
      if select([klout],nil,nil,0.1)
        loglines += klout.read_nonblock(1000).split("\n") unless klout.eof
      end
      loglines.flatten!
      drives.each {|d|
        d.klog(*loglines)
        d.output_display
      }
      loglines.clear
      threads = threads.find_all {|t|
        t.alive?
      }
      sleep 1
      $stderr.write(clearer)
      $stderr.flush
    end
  ensure
    Process::kill(9, klpid)
    header "Final status:"
    drives.each {|d|
      d.output_display
    }
    drives.each {|d|
      d.output_drive_descriptor
      if d.passed?
        puts colored( "#{d.dev} passed!  Label and store it.", 'bold', 'black', 'on_green' )
      elsif d.aborted?
        errorMessage "#{d.dev} reached its time limit and did not finish testing.  Recycle it.\n"
      elsif d.stopped?
        errorMessage "#{d.dev} did not finish testing.  Test it again.\n"
      elsif d.retry?
        errorMessage "#{d.dev} did not wipe the entire disk.  Test it again.\n"
      elsif d.failed?
        errorMessage "#{d.dev} failed.  Recycle it.\n"
      else
        errorMessage "#{d.dev} did not finish testing.  Seek expert attention.\n"
      end
    }
    clear_stdin
  end
end
