#!/bin/sh

# This script is called by "lessdisks-cloner" via
# "/etc/lessdisks-cloner/postclone" (presently a symlink to this
# script).

# We are NOT chroot, and $TARGET contains the location of the newly
# imaged file system.  We are still being run by the lessdisks kernel,
# which does NOT necessarily match the kernel that will run the newly
# cloned computer.  Thus, we cannot modprobe until AFTER a reboot.

# $TARGET has supposedly and hopefully been exported by
# "lessdisks-installer":
#
${TARGET:=/mnt}

#FREEKBOX_POSTCLONE_D=/usr/local/freekbox2/postclone
FREEKBOX_POSTCLONE_D=/etc/lessdisks-cloner/lessdisks-postclone

export FREEKBOX_POSTCLONE_D

cd ${TARGET}/${FREEKBOX_POSTCLONE_D}

PATH=.:$PATH

# Install the boot loader.
#
# Note: at some point this needs to get information about which
# partition is the /boot one and what disk to install to, etc.
#
chroot ${TARGET} ${FREEKBOX_POSTCLONE_D}/boot-loader

# Update the initrd ???
#
# Don't need to do this UNLESS the / device on the target is not the
# same as the / device on the golden client.  (/dev/hda3; 0x0303) If
# they are a mismatch, then the initrd MUST be updated BEFORE a reboot
# can happen!
#
## mkinitrd -r XXXXX

if [ "update" != "$1" ]; then
  # Install the "unconfigured" hook that will run upon first reboot.
  # this is not run when the script is being updated- so as not to overwrite configuration files such as X
#  ln -sv $FREEKBOX_POSTCLONE_D/99unconfigured.sh ${TARGET}/etc/rcS.d/S99unconfigured

  # Fixup the ethernet configuration.
 # chroot ${TARGET} ${FREEKBOX_POSTCLONE_D}/ethernet-script
else
  if [ -n $(ifconfig eth0) ]; then
    # update the apt sources, so they're mostly current
    chroot ${TARGET} apt-get update
    # remove apt.conf, which contains our squid proxy
    chroot ${TARGET} rm /etc/apt/apt.conf
  fi
  echo "updating, not making unconfigured symlink"
fi

exit 0
